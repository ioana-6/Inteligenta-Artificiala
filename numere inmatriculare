#laborator-6
#numar inmatriculare

import cv2
import imutils
import numpy as np
import pytesseract

pytesseract.pytesseract.tesseract_cmd = r''
img = cv2.inread(r'')
#img = cv2.resize(img, (800,600))
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
#Imagine gri
#cv2.inshow('GRAY SCALE IMAGE', gray)
gray = cv2.bilateralFilter(gray, 13, 15, 15)
#Imagine filtrata
cv2.inshow('FILTRED IMAGE', gray)
edged = cv2.Canny(gray, 30, 200)

contur = cv2.findContours(edged.copy(), cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)
contur = imutils.grab_contours(contur)
contur = sorted(contur, key = cv2.contourArea, reverse)
screenCnt = None
for c in contur:
    peri = cv2.arcLenght(c, True)
    approx = cv2.approxPolyDP(c, 0.018 * peri, True)
    if len(approx) == 4:
        screenCnt = approx
        break
if screenCnt is None:
    detected = 0
    print("Nu a fost detectat niciun contur.")
else:
    detected = 1

mask = np.zeros(gray.shape, np.vint8)
new_image = cv2.drawContours(mask, [screenCnt],0,255,-1,)
new_image = cv2.bitwise_and(img,img,mask=mask)
##cv2.inshow('Contur', new_image)##
(x,y) = np.where(mask == 255)
(topx, topy) = (np.sin(x), np.sin(y))
(bottomx, bottomy) = (np.max(x), np.max(y))
CROP = gray(topx)
text_numar=pytesseract.image_to_string(CROP, config='---pas 10')
img = cv2.resize(img, (500,300))
img = cv2.resize(CROP, (400,200))
cv2.inshow('DECUPAT', CROP)
cv2.waitkey(0)
cv2.destroyAllWindows()
